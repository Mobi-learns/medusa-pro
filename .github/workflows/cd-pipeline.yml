name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.20.4'

    - name: Install dependencies
      run: npm install

    - name: Build Docker image
      run: docker build -t medusa-app .

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 590183752334.dkr.ecr.ap-south-1.amazonaws.com
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Tag and push Docker image
      run: |
        docker tag medusa-app:latest 590183752334.dkr.ecr.ap-south-1.amazonaws.com/medusa-store:latest
        docker push 590183752334.dkr.ecr.ap-south-1.amazonaws.com/medusa-store:latest

    - name: Register new ECS Task Definition
      run: |
        aws ecs register-task-definition \
          --family medusa-task \
          --network-mode awsvpc \
          --container-definitions '[{
            "name": "medusa-container",
            "image": "590183752334.dkr.ecr.ap-south-1.amazonaws.com/medusa-store:latest",
            "essential": true,
            "memory": 512,
            "cpu": 256
          }]' \
          --requires-compatibilities FARGATE \
          --memory 512 \
          --cpu 256 \
          --execution-role-arn arn:aws:iam::590183752334:role/ecs-task-execution-role \
          --task-role-arn arn:aws:iam::590183752334:role/ecs-task-role

    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster $(terraform output -raw ecs_cluster_name) \
          --service $(terraform output -raw ecs_service_name) \
          --force-new-deployment
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
